=pod

=head1 NAME

Net::Stripe - API client for Stripe.com

=head1 VERSION

version 0.10

=head1 SYNOPSIS

 my $stripe     = Net::Stripe->new(api_key => $API_KEY);
 my $card_token = 'a token';
 my $charge = $stripe->post_charge(  # Net::Stripe::Charge
     amount      => 12500,
     currency    => 'usd',
     card        => $card_token,
     description => 'YAPC Registration',
 );
 print "Charge was not paid!\n" unless $charge->paid;
 my $card = $charge->card;           # Net::Stripe::Card

 # look up a charge by id
 my $same_charge = $stripe->get_charge($charge->id);

 # ... and the api mirrors https://stripe.com/docs/api
 # Charges: post_charge() get_charge() refund_charge() get_charges()
 # Customer: post_customer() 

=head1 DESCRIPTION

This module is a wrapper around the Stripe.com HTTP API.  Methods are 
generally named after the HTTP method and the object name.

This method returns Moose objects for responses from the API.

=head1 METHODS

=head2 new PARAMHASH

This creates a new stripe api object.  The following parameters are accepted:

=item api_key

This is required. You get this from your Stripe Account settings.

=item debug

You can set this to true to see extra debug info.

=item debug_network

You can set this to true to see the actual network requests.

=head1 Charge Methods

=head2 post_charge( PARAMHASH | OBJECT )

=head2 get_charge( CHARGE_ID )

=head2 refund_charge( CHARGE_ID )

=head2 get_charges( PARAMHASH )

=head1 Customer Methods

=head2 post_customer( PARAMHASH | OBJECT )

=head2 get_customer( CUSTOMER_ID )

=head2 delete_customer( CUSTOMER_ID )

=head2 post_customer_subscription( CUSTOMER_ID, PARAMHASH )

=head2 get_customers( PARAMHASH )

=head1 Card Methods

=head2 post_card( PARAMHASH )

=head2 get_card( customer_id => CUSTOMER_ID, card_id => CARD_ID )

=head2 get_cards( customer_id => CUSTOMER_ID)

=head2 update_card( customer_id => CUSTOMER_ID, card_id => CARD_ID)

=head2 delete_card( customer_id => CUSTOMER_ID, card_id => CARD_ID )

=head1 Subscription Methods

=head2 post_subscription( PARAMHASH )

=head2 get_subscription( customer_id => CUSTOMER_ID )

=head2 delete_subscription( customer_id => CUSTOMER_ID )

=head1 Token Methods

=head2 post_token( PARAMHASH )

=head2 get_token( TOKEN_ID )

=head1 Plan Methods

=head2 post_plan( PARAMHASH )

=head2 get_plan( PLAN_ID )

=head2 delete_plan( PLAN_ID )

=head2 get_plans( PARAMHASH )

=head1 Coupon Methods

=head2 post_coupon( PARAMHASH )

=head2 get_coupon( COUPON_ID )

=head2 delete_coupon( COUPON_ID )

=head2 get_coupons( PARAMHASH )

=head1 Invoice Methods

=head2 post_invoice( OBJECT )

=head2 get_invoice( INVOICE_ID )

=head2 get_upcominginvoice( COUPON_ID )

=head2 get_invoices( PARAMHASH )

=head1 Invoice Item Methods

=head2 post_invoiceitem( PARAMHASH | OBJECT )

=head2 get_invoiceitem( INVOICEITEM_ID )

=head2 delete_invoiceitem( INVOICEITEM_ID )

=head2 get_invoiceitems( PARAMHASH )

=head1 METHODS

=head2 API Object

=head1 SEE ALSO

L<https://stripe.com>, L<https://stripe.com/docs/api>

=head1 CONTRIBUTORS

=head1 AUTHOR

Luke Closs

=head1 CONTRIBUTORS

=over 4

=item *

Andrew Solomon <andrew@illywhacker.net>

=item *

Brian Collins <bricollins@gmail.com>

=item *

Devin M. Certas <devin@nacredata.com>

=item *

Dimitar Petrov <mitakaa@gmail.com>

=item *

Dylan Reinhold <dylan@gasdasoftware.com>

=item *

Jonathan "Duke" Leto <jonathan@leto.net>

=item *

Luke Closs <me@luk.ec>

=item *

Olaf Alders <olaf@wundersolutions.com>

=item *

Rusty Conover <rusty@luckydinosaur.com>

=item *

Sachin Sebastian <sachinjsk@users.noreply.github.com>

=item *

Tom Eliaz <tom@tomeliaz.com>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2011 by Copyright 2011, Prime Radiant, Inc..

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
